

// 풀이
// 실패한 풀이 ㅠ
function solution(n) {
    var answer = '';
    while(n>2){
        answer = n%3==1?"1":n%3==2?"2":"4" + answer;
        n = n<=3?0:Math.floor(n/3);
    }
    answer = (n<=0?"":n) + answer;
    return answer;
}


// 실패한 풀이 고쳐서 해결!!
// n = n<=3?0:Math.floor(n/3); => n = Math.floor((n-1)/3);
// n-1 이 중요 !!
// 9 => "24" , 10 => "41"
// 기존 코드에 n/3 을 하면 9 => "44"가 나와버린다.
// -1을 추가해서 3의 배수 처리해주기

// 성공한 풀이
// 조건 문을 줄이기 위해
// while의 조건을 n 으로 줌 
// Math.floor((n-1)/3) 은 3이하의 수는 0을 return한다.
// 0 = false 이기때문에 종료됨
// 따라서 3이하의 수는 올림수가 없다는 뜻이다.

const number = ["4", "1", "2"];
function solution(n) {
    var answer = '';
    while(n){
        answer = number[n%3] + answer;
        n = Math.floor((n-1)/3);
    }
    return answer;
}

// 재귀를 사용한 풀이

const number = ["4", "1", "2"];
function solution(n) {
    return n == 0?"":solution(Math.floor((n-1)/3)) + number[n%3];
}

