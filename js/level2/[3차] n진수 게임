// 해결 

/*
문제
튜브가 하는 게임의 방식이 n진수를 정하면 n진수를 0부터 점차 늘려가면서 한자리씩 이야기하는 게임이다.
ex: 2진수 면 0, 1, 1, 0, 1, 1, 1 ~~ 
    0 1 10 11 111 1000 => 이거를 하나씩 이야기한다고 생각하면 된다.

튜브는 이기고싶기 때문에 미리 말할 숫자를 구하여라

조건
매개변수 4: n 진법, t 미리구해야하는 숫자갯수, m 참가인원, p 튜브의 순서
1. n : 2~16
2. t : 1~1000
3. m : 2~100
4. p : 1~m

풀이
숫자를 저장하면서 저장하려고 하는데 미리 구해야하는 갯수가 최대 1000개 라서 걱정이다.
1. p를 시작으로 m 만큼 늘려가면서 t 만큼 숫자를 구한다.
2. n을 활용해서 parseInt(숫자/n) 하면 몇번째를 이야기해야하는지 알 수 있다.

규칙
1. 숫자를 넘기는 term은 처음 n/2 를 넘으면 2배가 된다.

계속 문슨 규칙 찾아보려다가 문제를 다시 봤느데 
그냥 for문 돌면서 index 늘려가면서 차례 생각해서 answer에 추가해주면 될것같은데
종료를 answer.length == t와 같으면


// 다른 사람 풀이
다른 사람의 풀이를 보니깐 간편하게 풀어서 정리함
1. t 길이 만큼의 배열 선언 후 안에 내용을 튜브가 말해야하는 순서를 적어놓음 .map((a,i)=>i*m+p-1);
2. string을 마지막 나올 숫자만큼 roof 하면서 string에 전부 n 진주로 변화해서 넣기
3. 선언한 배열 내 작성해 놓은 순서를 string 위치꺼를 꺼내와서 return하기...
간단스 .. 다른 거 해야하는거면 이런 공식화 도 생각해보자 간단한 공식


*/
// 최초풀이 => 통과 => O(N)
function solution(n, t, m, p) {
    var answer = '';
    let i=0; // 현재 수
    let count = 0;
    while(answer.length < t){
        let string = i.toString(n);
        // console.log(string);
        for(let j=0; j<string.length; j++){
            count = count+1 >= m ? 0 : count+1;
            if(count % m == p ) answer += string[j].toUpperCase();
            if(count==0 && m == p ) answer += string[j].toUpperCase();
            if(answer.length == t) break;
        }
        i++;
    }
    return answer;
}

// 다른 사람 풀이
function solution(n, t, m, p) {
    var tubeT = Array.apply(null,Array(t)).map((a,i)=>i*m+p-1);
    var line = '';
    var max = m*t + p;
    for (var i =0;line.length <= max; i++) {
        line += i.toString(n);
    }
    return tubeT.map(a=>line[a]).join('').toUpperCase();
}