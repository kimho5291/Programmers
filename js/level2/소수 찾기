
var split_arr = null;

function solution(numbers) {
    var answer = 0;
    split_arr = numbers.split("");
    console.log(split_arr)
    
    let arr2 = [];
    for(let i=0; i<split_arr.length; i++){ // i는 자리수
        let temp = split_arr.map((e, index) => {
            console.log("e : "+e+" || index : "+index);
            //for(let j=0; j<)
            
            return e;
        });
        arr2.push(temp);
    }
    console.log(arr2)
    
    
    return answer;
}


// 알고리즘 구상
/*
ex) 1 2 3 4
1자리 수
[1] [2] [3] [4]
2자리수
[1] 2 3 4 [2] 1 3 4 [3] 1 2 4 [4] 1 2 3
3자리수
[1] (2) 3 4 (3) 2 4 (4) 2 3
[2] (1) 3 4 (3) 1 4 (4) 1 3
[3] (1) 2 4 (2) 1 4 (4) 1 2
[4] (1) 2 3 (2) 1 3 (3) 1 2
4자리수
[1] 234

위 처럼 반복을 자리 수 만큼
해당 자리수에서 글자수만 큼 반복
재귀를 사용할 함수 생성 -> (num, arr, count)  -> num -> 위와 같이 기준이 되는 숫자
                                            -> arr -> 기준으로 선정되지 않은 숫자
                                            -> count -> 남은 자리수
재귀를 통해 나온 숫자에 자신(기준)의 숫자를 더해 요소 추가
ex) 
3자리 1234

1 234 2
    => 2 34 1
        => 3 4 0 
        => return 3
    => add("2"+"3");
        => 4 3 0
        =>return 4
    => add ("2"+"4");
    => 3 42 1
        => 4 2 0
        => return 4
    => add("3"+"4");
        => 2 4 0
        => return 2
    => add("3"+"2");
    => 4 23 1
        => 2 3 0
        => return 2
    => add("4"+"2");
        => 3 2 0
        => return 3
    => add("4"+"3");
    => return ["23", "23", "34", "32", "42", "43"];
add("1"+"23");
add("1"+"24");
add("1"+"34");
add("1"+"32");
add("1"+"42");
add("1"+"43");

위와 같은 느낌으로 도는 것!! 재귀 가능

[220611]
재귀 함수 서 add를 하는 부분이 명확하지 않음
오히려 매개변수로 0이 들어오면 그때 add해서 return 하는게 더 좋을 것 같음

ex) 123

1자리
123
    => 1 23 0
    => add('1')


2자리
    => 1 23 1
        => 2 3 0
        => add('2');
        
        => 3 2 0
        => add('3');
    => ['2', '3'] 에다가 자기 숫자 더하기
    => ['12', '13']

ex) 1234

3자리

1234
    => 1 234 2
        => 2 34 1
            => 3 4 0
            => add '3'

            => 4 3 0
            => add '4'
        => ['3', '4'] => self add
        => ['23', '24']

        => 3 42 1

*/

//[220611] 풀이
//완전탐색트리
//트리에 들어가면서 숫자를 더하면서 들어가기
//마지막에 소수인지 판별
//소수면 소수 arr 추가 및 return 1

const decimal_arr = [];

const decimal = (number) =>{
    if(number <= 1) return false;
    for(let i=2; i<=Math.sqrt(number); i++){
        if(number%i === 0)
            return false;
    }
    return true;
}

function ccc(cur_arr, sur_arr, count){
    if(count == 0){
        let temp = Number(cur_arr.join(""));
        if(decimal(temp)){
            if(decimal_arr.findIndex(e=> e==temp) == -1){
                decimal_arr.push(temp);
                return 1;
            }else{
                return 0;
            }
        }else{
            return 0;
        }
    }else{
        let result = 0;
        for(let i=0; i<sur_arr.length; i++){
            let temp = sur_arr[0];
            sur_arr.splice(0,1)
            cur_arr.push(temp);
            result += ccc(cur_arr, sur_arr, count-1);
            cur_arr.pop();
            sur_arr.push(temp);
        }
        return result;
    }
}

function next(arr){
    let temp = arr[0];
    arr.splice(0,1);
    arr.push(temp);
}


function solution(numbers) {
    var answer = 0;
    let split_arr = [...numbers];
    
    
    
    // 자리수 for문
    // f_l = 자릿수
    for(let f_l=0; f_l<split_arr.length; f_l++){

        // 주가될 숫자 정하기
        for(let s_l=0; s_l<split_arr.length; s_l++){
            
            answer += ccc([],split_arr, f_l+1);
            
            next(split_arr);
        }
        
        
    }
    
    //console.log("## answer : " + answer);
    //console.log("## decimal : " + decimal_arr);
    
    return answer;
}