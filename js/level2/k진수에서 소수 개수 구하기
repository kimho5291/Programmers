// 해결

/*
문제
n을 k진수(법)으로 변경하였을 때 아래의 조건을 만족하는 소수의 갯수 구하기
소수 = P = Prime number
여기서 소수 판별은 k진수일때 소수가 아닌 10진수 일때 소수이다.
1. 0P0 => 소수 양옆이 0일때 
2. P0 => 소수 오른쪽만 0이 있고 왼쪽에 아무것도 없을 때 
3. 0P => 소수 왼쪽에 0이 있고 오른쪽에 아무것도 없을 때 
4. P => 소수 양쪽에 아무것도 없을 때    
ex: 101은 소수가 될 수 없음

풀이 방법
1. n을 k진수로 변환하기
2. 변환한 k진수문자열를 순회
2-1. 만나는 수를 저장한다.
2-2. 0을 만날 때 if문 들어가기 -> 아니면 2  
2-2-1. 저장한 수가 10진수로 바꿨을 때 소수인지 판별 -> 아니면 pass 2-2-4    
2-2-2. 소수로 판단될 경우 위의 4가지 조건에 충족하는지 확인 
2-2-3. 맞으면 answer 증가 후 2-2-4, 아니면 pass 2-2-4 
2-2-4. 저장한 수 초기화 

풀이에 필요한 내용
1. 10->k 진수 변환 함수 -> n.toString(k); 
2. k->10 진수 변환 함수 -> parseInt(k진수로 변환한 문자열, k);
3. 소수 판별 함수
4. 4가지에 충종하는 지 판별 함수

추가한 테케
1. 1838137, 8, 3
2. 2, 10, 1
3. 945128899, 8, 4

// 최초 풀이
위와 같은 방식으로 해결하였으나 추가한 예외처리는 아래와 같다.
1. 소수 처리할때 1은 false
2. start, end를 -1로 초기화 -> check 함수에서 첫번재를 구분할 수 있음


11 12 14 15 16 -> check를 빼면
1 2 12 -> check 추가하면
12가 공통이니깐 12는 check 외 적인 문제

보다보니깐 check가 필요 없어보인다. <- 어짜피 숫자를 인식하기 위해서 0을 판단하는데
어짜피 하다보면 양옆이 0이거나 맨앞이거나 맨 마지막이거나 한글자이거나 
그렇다.
순회 할 필요도 없이 split으로 하면 되는거였다..

아 계속 틀려서 질문을 보았더니 
방식은 똑같았다 ..
10진수를 바꾸는 과정을 10->k진수로 바꾼것을 다시 k->10으로 변경하면 되는건줄알았으나
그냥 k진수를 10진수처럼 여기고 처리하는 방식이어다 ...................ㅠㅠㅠㅠㅠㅠㅠㅠㅠ 
시간아깝다.

다름 사람의 코드를 보고 내형식대로 바꿨느데 11, 12, 14, 15, 16이 실패가 나온다
코드를 봐도 이해가 안가는데 잘 모르겠다. 아무리봐도 똑같이 해봐도 
forEach를 제외하고는 똑같은데 풀리지 않는다 ....

forEach를 넣으면 풀리고 아니면 안풀린다..
뭐 일단 for 문제라고 알았으니 ... 그렇게 하도록하자 ... ㅠ

아 .. 알았다 
소수 구하는 조건이 반대였다 ...
if(i%num === 0) return false; ㅋㅋㅋㅋㅋㅋㅋㅋㅋ
num % i 로 바꾸면 된다 ...




**** 진수변환 공식 (참고용)
n을 k로 나누면서 나온 나머지(modulo)를 가지고 진수를 얻을 수 있음
ex : 10진수 11을 2진수로 변경하기
11/2 = 5 | mod = 1
5/2 = 2 | mod = 1
2/2 = 1 | mod = 0
더이상 나눌 수 없을 때 나온 몫 과 나온 나머지를 역순으로 놓으면 
1011(2) == 11(10) 과 같다.

let temp = "";
while(n >= k){
    temp = (n%k)+temp;
    n = parseInt(n/k);
}
temp = n+temp;
console.log(temp)

*/

// 최초 풀이 => 84.5점 => 실패 => O(N)
function solution(n, k) {
    var answer = 0;
    let kNumber = n.toString(k);
    // console.log(kNumber)
    
    let value = {num: "", start: -1, end: -1};
    for(let i=0; i<kNumber.length; i++){
        // console.log(i, kNumber[i])
        if(kNumber[i] == '0'){
            if(value.start == -1) continue;
            if(value.end == -1) value.end = i;
            
            // console.log("end1", value)
            // console.log("end2", prime(value.num, k));
            // console.log("end3", check(kNumber, value));
            if(prime(value.num, k) && check(kNumber, value)) answer++;
            value = {num: "", start: -1, end: -1};
        }
        else{
            if(value.start == -1) value.start = i;
            value.num = value.num + kNumber[i];
            // console.log("start", value)
        }
    }
    if(value.start != -1 && value.end == -1) {
        if(prime(value.num, k) && check(kNumber, value)) answer++;
    }
    
    return answer;
}

function prime(num, k){
    num = parseInt(num, k);
    if(num < 2) return false;
    for(let i=2; i<Math.sqrt(num); i++){
        if(i%num == 0) return false;
    }
    return true;
}

function check(kNumber, value){
    if(kNumber.length == 1) return true;
    if(value.start == 0 && kNumber[value.end] == '0') return true;
    if(value.end == -1 && kNumber[value.start-1] == '0') return true;
    if(kNumber[value.start-1] == '0' && kNumber[value.end] == '0') return true;
    return false;
}

// 변경 1 => 85.7점 => 코드 짧아짐
function solution(n, k) {
    var answer = 0;
    let kNumber = n.toString(k).split("0");
    // console.log(kNumber)
    
    for(let i=0; i<kNumber.length; i++){
        if(kNumber[i] == "") continue;
        console.log(kNumber[i])
        if(prime(kNumber[i], k)) answer++;
    }
    
    return answer;
}

function prime(num, k){
    if(num == "" || num < 2) return false;
    num = parseInt(num, k);
    for(let i=2; i<=Math.sqrt(num); i++){
        if(i%num === 0) return false;
    }
    return true;
}


// 변경 3 => 통과 => 소수 공식 변경 ...
function solution(n, k) {
    let kNumber = n.toString(k).split('0').map(str=>Number(str)).filter(num => num !== 1 && num !== 0);
    let answer = 0;
    for(let i=0; i<kNumber.length; i++){
        if(prime(kNumber[i])) answer++;
    }
    return answer;
}

function prime(num){
    for(let i=2; i<=Math.sqrt(num); i++){
        if(num%i === 0) return false;
    }
    return true;
}