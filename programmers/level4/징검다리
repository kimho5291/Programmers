/*
문제
출발지점에서 distance 만큰 떨어진 도착지점에 가야한다.
하지만 그길에는 바위들이 놓여져있고 그중 몇개를 제거하려고한다.
바위를 주어신 숫자 n개를 제거한 뒤 각 지점사이의 거리의 최솟값중 가장 큰 값을 return 하시오


조건
매개변수 : distance 도착지점까지 거리, rocks 바위 위치, n 제거할 바위 수
distance : 1~10억
rocks : 1~5만
n : 1 ~ rocks.length

풀이
이진 탐색을 통해서 진행한다.
이진탐색의 범위는 1~distance+1 까지 => 1부터 시작하는 이유는 예외처리를 하기위함 => distance가 1이고 바위가 없을때
범위를 0 부터 시작해버리면 return 0이 되어버린다. 그래서 1부터 시작

문제를 다르게 해석했을 때
바위 n개를 제거한 뒤 각 지점 사이의 거리의 최솟 값 중 가장 큰값을 구해라 에서
바위 n개를 이용하여 특정거리 d에 대해 모든 지점 사이의 거리가 d 이상이 되는 d 중 가장 큰 값을 구하여라
=> 특정 거리를 지정해놓고 start에서 해당 돌까지의 거리가 특정거리보다 높으면 remove하는 것을 순회
=> 순회의 결과가 n보다 크면 end 줄이기, 아니면 start 늘이기
=> 하다보면 n개를 제거해서 나올 수 있는 가장 큰값이 나온다.


*/
// 책보고 풀이 => 통과
function solution(distance, rocks, n) {
    rocks = [...rocks, distance];
    rocks.sort((a,b) => a-b);
    
    let start = 1, end = distance+1;
    while(end - start > 1){
        let d = parseInt((end+start)/2);
        if(check(d, rocks, n)){
            end = d;
        }else{
            start = d;
        }
        
    }
    return start;
}

function check(d, rocks, n){
    let remove = 0, last = 0;
    for(let i=0; i<rocks.length; i++){
        if(rocks[i] - last < d){
            remove++;
            continue;
        }
        last = rocks[i];
    }
    return remove > n;
}