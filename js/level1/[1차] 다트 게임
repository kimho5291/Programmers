
// 풀이
// 3개의 다트 점수가 저장될 answer
// 다트점수 저장할 index
// for문으로 문자열 하나씩 돌면서 S, D, T *, #, 다트 점수를 확인 및 점수에 반영해준다.
// return은 answer의 요소를 reduce를 사용하여 합을 반환

function solution(dartResult) {
    var answer = [0,0,0];
    let index = -1;
    
    for(var i=0; i<dartResult.length;i++){
        if(!Number(dartResult[i]) && dartResult[i] != '0'){
            if(dartResult[i] == 'S'){
                answer[index] = Math.pow(answer[index], 1);
            }
            else if(dartResult[i] == 'D'){
                answer[index] = Math.pow(answer[index], 2);
            }
            else if(dartResult[i] == 'T'){
                answer[index] = Math.pow(answer[index], 3);
            }
            else if(dartResult[i] == '*'){
                index>=1?answer[index-1] *=2:0;
                answer[index] *=2;
            }
            else if(dartResult[i] == '#'){
                answer[index] *= -1;
            }
        }
        else{
            if(dartResult[i] == '1' && dartResult[i+1] == '0'){
                answer[++index] = 10;
                i++;
            }else{
                answer[++index] = dartResult[i]=='0'?0:Number(dartResult[i]);
            }
        }
    }
    
    return answer.reduce((sum, cur) => sum+= cur, 0);
}


// 다른 사람 풀이 참조
// 정규식을 활용한 풀이
// ⓐ => string.match => 정규식에 맞는 패턴을 찾아 array로 반환
//    => 정규식 => /\d.\D?/g => \d = 숫자  ||  . => \n을 제외한 문자  ||  ? => 1 or 0  || \D => 숫자가 아닌 문자
//    => 결국 return 되는 문자의 구성은 숫자(1개)+\n을 제외한 문자(1개 또는 0개), 숫자를 제외한 문자(1개) => 총 2개 혹은 3개이다.

// ⓑ => 위와 같이 match 사용
//    => 정규식 => /(^\d{1,})(S|D|T)(\*|#)?/ => ()는 묶어서 1개로 본다는 뜻이다. => 총 3개로 나누겠다는 말
//    => (^\d{1,}) => 시작은 숫자이며 숫자는 1개 이상이다.
//    => (S|D|T) => 문자 S, D, T 중 1개이다.
//    => (\*|#) => 문자 *, # 중 1개이다.
//    => ex) "3S" => ["3", "S", undefined], "3T*" => ["3", "T", "*"]

// ⓒ => ⓑ 의 결과값을 가지고 bonus와 options 를 활용해 제곱하여 반환한다.
//    => Math.pow(곱할 값, 제곱할 정도) => ex) Math.pow(2, 3) => 2^3 => 8

// ⓓ => 3번재 문자가 *이면 이전 index 값에 2를 곱해준다.
// ⓔ => darts 배열을 재사용한다.
// ⓕ => array.reduce를 활용하여 모든 요소를 더한 값을 반환한다.


function solution(dartResult) {
    let darts = dartResult.match(/\d.\D?/g); // ⓐ
    const bonus = { 'S': 1, 'D': 2, 'T': 3 },
          options = { '*': 2, '#': -1, undefined: 1 };
    
    darts.forEach((item, index) => {
        let split = item.match(/(^\d{1,})(S|D|T)(\*|#)?/), // ⓑ
            score = Math.pow(split[1], bonus[split[2]]) * options[split[3]]; // ⓒ
        
        if(split[3] == "*") darts[index-1] *= 2; // ⓓ
        darts[index] = score; // ⓔ
    })
    return darts.reduce((a,b) => a+b, 0); // ⓕ
}

