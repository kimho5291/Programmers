//

/*
문제
지원서에 표시된 4가지 저보를 가지고 query에 맞는 갯수를 찾으시오

조건
매개변수 : info 지원서 정보, query 검색 정보
1. info 길이 : 1~50000
- 1 개발언어 : cpp, java, python
- 2 직군 : backend, frontend
- 3 경력 : junior, senior
- 4 점수 : 1~100000
- 각 사항은 스페이스로 구분

2. query 길이 : 1~100000
- 각 문자열은 "[조건] X" 형식
- [조건]은 "개발언어 and 직군 and 경력 and 소울푸드" 형식
- 언어는 cpp, java, python, - 
- 직군은 backend, frontend, - 
- 경력은 junior, senior, - 
- 소울푸드는 chicken, pizza, - 
- '-' 표시는 해당 조건을 고려하지 않겠다는 의미
- X는 코딩테스트 점수를 의미하며 조건을 만족하는 사람 중 X점 이상 받은 사람은 모두 몇 명인 지를 의미합니다.
- 각 단어는 공백문자(스페이스 바) 하나로 구분

풀이
1. info, query를 파싱한다.
2. query에 맞는 정렬을 해준다. -> query length 만큼 
3. 이진탐색으로 시작점을 찾는다.
4. for문을 돌면서 몇개인시 셈한다.

모든 for문을 돌면서 조건을 전부 검색하는 무지막지한걸로 정확성은 맞았으나 효율설 전부 시간초과

모든 조건 검색 말고 질문하기를 보았을 때 이진탐색을 쓰라고함 .. 
그런데 이진탐색을 하려면 정렬을 해야하는데 정렬을 전부 돌리면 사실 의미가 없지 않나..

해결방법
info에서 얻은 정보와 아무거나 들어갈 수 있는 "-"를 포함하여 나올수 있는 모든 경우의 수 16개를 만든다.
50,000 * 16 = 800,000 개의 info 제작
이후 query로 만들 수 있는 경우의 수 
언어4 * 직군3 * 경력3 * 푸드3 = 108
800,000 * 108 = 86,400,000 => 1억이 안되니 모든 경우를 만들어서 해도 시간복잡도에서 걸리지 않는다.
여기에 이진탐색을 넣으면 된다.

모든 경우의 만들고 정렬한다니 처음알게된 풀이방법
딕셔너리를 만들어서 하는경우가 생각보다 많은것같다
어찌보면 제일 단순한 방법이기도 ..

info에서 얻을 수 있는 모든 경우의 수 를 다 만들고 인원수를 체크하기 위해서 
경위의 수를 key로 놓고 score를 arr로 해서 넣어준다.


방법
1. info 원소가 가실 수 있는 모든 경우의수 만들기 -> 완전탐색 -> 점수는 따로 가지고있기
2. 모든 info를 돌렸으면 해당 경우의 수에 있는 점수를 정렬하기 오름
3. query를 돌면서 해당하는 경우의 수를 찾기 -> 이진탐색 => 조건을 가지고 key를 찾으면 되고 
    점수를 이진탐색으로 찾는다,, 그리고 이후 값은 어짜피 전부다 큰 녀석이니깐
    arr.length - 찾은 index를 해주면 인원이 나온다!!
4. 배열 return


*/

// 최초풀이 -> 40점 -> 효율성 모두 실패
function solution(info, query) {
    let objArr = createObject(info);
    //console.log(objArr)
    
    
    let queryArr = queryParse(query);
    //console.log(queryArr)
    
    let temp = sortObject(objArr, queryArr[0]);
    //console.log(temp)

    var answer = [];
    for(let i=0; i<queryArr.length; i++){
        answer.push(sortObject(objArr, queryArr[i]))
    }
    return answer;
}

function createObject(arr){
    let result = [];
    for(let i=0; i<arr.length; i++){
        let obj = {};
        let splitArr = arr[i].split(" ");
        obj.lang = splitArr[0];
        obj.part = splitArr[1];
        obj.career = splitArr[2];
        obj.food = splitArr[3];
        obj.score = splitArr[4];
        result.push(obj);
    }
    return result;
}

function sortObject(objArr, query){
    let temp = [...objArr];
    let i=0;
    while(i<temp.length){
        if(query[0] != "-" && temp[i].lang != query[0]){
            temp.splice(i, 1);
            continue;
        }
        if(query[1] != "-" && temp[i].part != query[1]){
            temp.splice(i, 1);
            continue;
        }
        if(query[2] != "-" && temp[i].career != query[2]){
            temp.splice(i, 1);
            continue;
        }
        if(query[3] != "-" && temp[i].food != query[3]){
            temp.splice(i, 1);
            continue;
        }
        if(query[4] != "-" && Number(temp[i].score) < Number(query[4])){
            temp.splice(i, 1);
            continue;
        }
        
        i++;
    }
    
    return temp.length;
}

function queryParse(query){
    let result = [];
    for(let i=0; i<query.length; i++){
        let arr = [];
        let splitArr = query[i].split(" and ");
        for(let j=0; j<splitArr.length; j++){
            if(j+1 == splitArr.length){
                let split = splitArr[j].split(" ");
                arr.push(split[0]);
                arr.push(split[1]);
            }else{
                arr.push(splitArr[j]);
            }
        }
        result.push(arr);
    }
    
    return result;
}


/////////// 변경 풀이 => 통과 => 효율성 최대 970ms

function solution(info, query) {

    let dictionary = createDictionary(info);
    for(let key in dictionary){
        dictionary[key].sort((a,b) => a-b);
    }

    var answer = [];
    for(let i=0; i<query.length; i++){
        let parse = queryParse(query[i]);
        let score = Number(parse.splice(-1, 1));
        parse = parse.join("");
        answer.push(binarySearch(dictionary[parse], score));
    }
    return answer;
}

function binarySearch(arr, value){
    if(arr == undefined) return 0;
    
    let max = arr.length, min = 0;
    while(max > min){
        let cur = parseInt((max+min)/2);
        if(arr[cur] >= value){
            max = cur;
        }else{
            min = cur + 1;
        }
    }
    return arr.length - min;
}


function createDictionary(info){
    let result = {};
    for(let i=0; i<info.length; i++){
        let splitArr = info[i].split(" ");
        let score = Number(splitArr.splice(-1, 1));
        dfs("", splitArr, result, score);
    }
    return result;
}

function dfs(string, remain, obj, score){
    if(remain.length == 0){
        if(obj[string] == undefined){
            obj[string] = [];
        }
        obj[string].push(score);
        return;
    }
    
    let splice = remain.splice(0, 1);
    dfs(string+splice, [...remain], obj, score);
    dfs(string+"-", [...remain], obj, score);
}

function queryParse(query){
    let arr = [];
    let splitArr = query.split(" and ");
    for(let j=0; j<splitArr.length; j++){
        if(j+1 == splitArr.length){
            let split = splitArr[j].split(" ");
            split.forEach(e => arr.push(e));
        }else{
            arr.push(splitArr[j]);
        }
    }
    return arr;
}